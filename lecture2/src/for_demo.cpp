#include <iostream>

int main()
{
    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9};

    for (int i = 0; i < 10; i++) // i++ тоже самое, что i = i + 1
    {
        std::cout << arr[i] << " ";
    }

    int arr1[10];

    for (int i = 0; i < 10; i++)
    {
        std::cin >> arr1[i];
    }

    // пример с вектором (структуры данных)
    std::vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 19, 23, 26, 53, 96};

    for (int i = 0; i < v.size(); i++)
    {
        std::cout << "Size: " << v.size() << std::endl;
        std::cout << v[i];
    }

    for (const auto &item : v)
    {
        std::cout << item << " ";
    }

    /*
        Здесь используется специальный цикл for-each, позволяющий итерироваться по элементам любого контейнера STL
        (в данном случае - вектора). Вместо auto можно было бы также использовать int, однако auto позволяет компилятору
        автоматически определить подходящий тип данных. const означает, что мы не можем изменять значения элементов вектора
        внутри цикла, а использование ссылки & позволяет избежать копирования элементов, что делает код более эффективным.
        Внутри цикла каждый элемент вектора (ссылка на него) печатается на стандартном потоке вывода (stdout) с пробелом
        после числа. Это позволит вывести на экран все числа из вектора с разделением пробелами.
    */

    return 0;
}